{
	"info": {
		"_postman_id": "5e7c9553-7401-4058-99e8-4750f16968e9",
		"name": "Petstore",
		"description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "335737"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "findByStatus",
					"item": [
						{
							"name": "Finds Pets by status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 2000ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/xml\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/xml\");",
											"});",
											"",
											"",
											"pm.test(\"Response schema is valid XML\", function () {",
											"    const responseData = xml2Json(pm.response.text());",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Response body has the required fields\", function () {",
											"    const responseData = xml2Json(pm.response.text());",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.ArrayList).to.exist;",
											"",
											"    responseData.ArrayList.item.forEach(function (item) {",
											"        pm.expect(item.id).to.exist;",
											"        pm.expect(item.category).to.exist;",
											"        pm.expect(item.name).to.exist;",
											"        pm.expect(item.photoUrls).to.exist;",
											"        pm.expect(item.tags).to.exist;",
											"        pm.expect(item.status).to.exist;",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "authUrl",
											"value": "https:///authorize",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "implicit",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available",
											"description": "Status values that need to be considered for filter"
										}
									]
								},
								"description": "Finds Pets by status"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<token>",
												"description": "Added as a part of security scheme: oauth2"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/findByStatus?status=available",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "available",
													"description": "Status values that need to be considered for filter"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"id\": \"<long>\",\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"status\": \"pending\",\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ]\n  },\n  {\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"id\": \"<long>\",\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"status\": \"available\",\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ]\n  }\n]"
								},
								{
									"name": "Invalid status value",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "<token>",
												"description": "Added as a part of security scheme: oauth2"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/findByStatus?status=available",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "available",
													"description": "Status values that need to be considered for filter"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "findByTags",
					"item": [
						{
							"name": "Finds Pets by tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response Content-Type is application/xml', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');",
											"})",
											"",
											"pm.test('Response body contains an ArrayList element', function () {",
											"    const responseData = xml2Json(pm.response.text());",
											"    pm.expect(responseData).to.have.property('ArrayList');",
											"})",
											"",
											"pm.test('Response is in XML format', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');",
											"})",
											"",
											"pm.test('Verify that the request accepts multiple tags and handles the comma-separated strings correctly', function () {",
											"    const responseData = xml2Json(pm.response.text());",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.ArrayList).to.exist;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "authUrl",
											"value": "https:///authorize",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "implicit",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByTags?tags=<string>&tags=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByTags"
									],
									"query": [
										{
											"key": "tags",
											"value": "<string>",
											"description": "Tags to filter by"
										},
										{
											"key": "tags",
											"value": "<string>",
											"description": "Tags to filter by"
										}
									]
								},
								"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<token>",
												"description": "Added as a part of security scheme: oauth2"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/findByTags?tags=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByTags"
											],
											"query": [
												{
													"key": "tags",
													"value": "<string>",
													"description": "Tags to filter by"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"id\": \"<long>\",\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"status\": \"pending\",\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ]\n  },\n  {\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"id\": \"<long>\",\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"status\": \"available\",\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ]\n  }\n]"
								},
								{
									"name": "Invalid tag value",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "<token>",
												"description": "Added as a part of security scheme: oauth2"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/findByTags?tags=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByTags"
											],
											"query": [
												{
													"key": "tags",
													"value": "<string>",
													"description": "Tags to filter by"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "{petId}",
					"item": [
						{
							"name": "Find pet by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Response has the required fields', function () {",
											"    const responseData = xml2Json(pm.response.text()).Pet;",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.category).to.exist;",
											"    pm.expect(responseData.name).to.exist;",
											"    pm.expect(responseData.photoUrls).to.exist;",
											"    pm.expect(responseData.tags).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"})",
											"",
											"pm.test('Verify content type is application/xml', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "authUrl",
											"value": "https:///authorize",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "implicit",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "1",
											"description": "(Required) ID of pet to return"
										}
									]
								},
								"description": "Find pet by ID"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<token>",
												"description": "Added as a part of security scheme: oauth2"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/:petId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId"
											],
											"variable": [
												{
													"key": "petId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"id\": \"<long>\",\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"status\": \"sold\",\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"name": "Invalid ID supplied",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "<token>",
												"description": "Added as a part of security scheme: oauth2"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/:petId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId"
											],
											"variable": [
												{
													"key": "petId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Pet not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "<token>",
												"description": "Added as a part of security scheme: oauth2"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/:petId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId"
											],
											"variable": [
												{
													"key": "petId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "authUrl",
				"value": "https:///authorize",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "implicit",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://bf5745e0-bd1a-4374-9aae-aeb681a4ba54-dev.e1-us-east-azure.choreoapis.dev/testing/api/v3/v1"
		}
	]
}